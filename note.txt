연관관계 주인 = fk를 가진 오브젝트

연관관계의 주인 ? fk를 누가 가지고 있느냐
jpa 는 그냥 board 를 select를 하는것이 아님
-> board table 내의 user를 처리 불가
따라서 board select를 할때 db에서 user를 join하여 처리함
쓸모 있을 수 있으나 아닐 경우도 있음

FetchType.Eager : 무조건 들고옴
FetchType.Lazy : 나중에 들고옴


json 왜 탄생, 어떻게 사용?
@Controller <-req- json/mime
return java -rsp-> json/mime

영속성 컨텍스트
<- JPA가 가지고 있음

모든 요청은 @Controller를 통해 모임, 응답도 여기서함 (CRUD)
@Contoller 에서 user 객체를 만들어 save가 되면
영속성 컨텍스트에서 user를 1차 캐시에 쌓임 : 영속화
이를 db에 옮김 -> 테이블에 새 row로 쌓임 : flush
flush가 진행될때 1차 캐시에서 사라지지 않음 -> select시 영속성 컨텍스트에 존재한다면 db를 거치지 않고 접근함
up  date : select -> 영속화 -> "data 변경" save -> id를 비교하여 동일 객체가 영속화 되어있으면 수정 -> db와 동일하게 함
@Transactional은 영속화된 객체를 가져와서 변경감지, 변경된 것이 있다면 db에 수정 -> 더티 체킹

get 요청
 body없이 데이터를 전송 url에 담아서 전송
 -> select시 사용 그냥 씀

post,put,delete 요청 (데이터를 변경)
 데이터를 담아 보내야 함 -> body
 username, password, email. ...
 form 태그 method="post" 형식으로 지정가능하나, get, post만 가능 (key=value 형태로 전송)
 put, delete는 불가능 -> javascript 로 요청해야함

통일 : javascript로 ajax요청 + data : json 통일 - 사용
form:form 태그 -> post, put, delete, get요청 가능 - 사용안함
-> <form:form method="post"></form:form> 형태로 사용

스프링 컨트롤러의 파싱 전략
key=value의 형태로 데이터를 받으면
1. method의 매개변수로 전달
2. 오브젝트를 만드는 역할 <-setter가 없을시 불가능

오브젝트로 데이터 받기
post 방식의 key=value(x-www-form-urlencoded)
단 class내의 field명과 같아야만 넣어줌
field가 비어있다면 null을 넣어줌
field 보다 많다면 err -> setter를 못찾음
-> 사실 그렇지 않음 그냥 무시함

key=value가 아닌 데이터의 파싱 방법
@RequestBody 를 통해서 파싱
이는 json을 수신하여 jackson lib이 작동

json 데이터를 전송방법
폼태그 만들어서 전송

script는 헤더에 적지 않고 </body>와 가장 가까운 곳에 작성
-> 인터프리터 언어의 특성상 먼저 변수들 생성 후에 처리 해주는 식으로 사용
-> user.js를 호출하고 난후 jquery 관련 스크립트가 추가됨, 에러 발생하여 header로 다시 올림

에러 확인 방법
console에서 에러 확인, network에서 요구 파일들 정상적으로 로드 되는지 확인

회원가입시 ajax 사용 이유
1. 요청에 대한 응답을 html이 아닌 Data(json)를 받기 위해서
-> 사용자가 브라우저일수도 있으나, 앱일 경우 html을 이해하지 못함
-> 앱은 정확히는 자바코드를 통해 화면을 그려야하나 자바코드를 리턴 못함
-> 브라우저는 항상 요청만 함, 화면을 그려줘야 할 필요 있음
->> 앱과 브라우저의 리턴이 다름, 그래서 data를 리턴하는 서버를 만듬

2. 비동기 통신을 하기 위해서
cpu 작업이 아닌, mem io 처리같은 경우 시간이 오래걸림 -> 이를 동기적으로 처리 할 경우 사용자 경험 저하
cpu 작업을 하는 것 과 별개로 io를 처리함
io가 완료되면 interrupt 이를 callback이라 함 -> io 관련 처리
-> 비동기적 실행

서비스가 필요한 이유
1) 트랜잭션 관리 -> Layer
2) 서비스 의미 때문
 : 1~n개의 트랜잭션이 모인 기능의 한 종류
 : 여러 트랜잭션을 묶어서 처리하며, 성공하면 commit, 아니면 rollback

트랜잭션 : 일이 처리되기 위한 가장 작은 단위, 여러 트랜잭션이 모여서 하나가 될수도 있음 -> 서비스
트랜잭션 사용하는 이유 : 데이터의 변경을 위해 commit을 묶어서 사용함
DB 격리수준
 oracle :
  read commit : commit이 되기 전 까지 read를 미룸
  문제점 : select 시기에 따라 data가 변함 -> 부정합
  data가 보였다,안보였다 하는 현상 -> phantom read
  phantom read C 부정합
   -> 해결방법 : repeatable read
 mySQL :
  InnoDB 스토리지 엔진
  repeatable read로 해결 : 부정합 해결, phantom read 는 불가능
  repeatable read : 트랜잭션이 종료되기 전까지는 db가 변하더라도 같은 값만을 select
   이는 어떻게 작동? : 자기 트랜잭션 번호보다 낮은 undo로그만을 참조
   문제점 : 트랜잭션만 정합성 보장, 단순 select는 보장되지 않음
   cud는 commit이 필요하여 @Transactional 을 붙여 보장됨
   select는 안붙이는 경우 있음 -> 앞으로는 붙이세요

req
-> web.xml -> 필터
(1) JDBC 커넥션 시작
(2) 트랜잭션 시작
(3) 영속성 컨텍스트 시작 <- 사용자 마다 생성
요청 분기 -> 서비스() 실행
repository 생성 CRUD -> 영속성 컨텍스트에 객체 생성
서비스에서 객체를 받음, 영속성에 있는 객체 값 처리
분기로 리턴
rsp
(4)JDBC 커넥션 종료
(5)트랜잭션 종료 - commit 변경감지(update 수행)
(6)영속성 컨텍스트 종료

-> 이 방식의 문제점?
(4)~(6)의 종료시점이 rsp이 아닌 @Controller로 리턴 될때 수행되도 됨
= 서비스가 종료될 때, 서비스에서 실질적인 로직이 실행 되기 때문
JDBC세션, 트랜잭션, 영속성 컨텍스트의 부하가 줄어들음
그래서 @Controller 리턴시 = 서비스 종료시 (4)~(6)이 수행됨
(1)~(2)도 요청 분기 시 = 서비스 시작시 하면 부하감소

개선안
req -> web.xml -> 필터
(1)영속성 컨텍스트 시작
@Controller 요청 분기
(2)JDBC 커넥션 시작
(3)트랜잭션 시작
@Service 시작
@Repository 생성,select , DB에서 받아와 영속성 컨텍스트에 객체 저장
@Repository를 통해 @Service로 객체 전달
@Service에서 로직 수행
(4)JDBC 커넥션 종료
(5)트랜잭션 종료 -> 변경감지를 통한 commmit, flush를 통해 update
(6)영속성 컨텍스트 종료
@Controller, @RestController로 리턴 html, json을 통해 로직 수행을 알림
rsp

-> 이 때의 문제점
이대호 조회 시, 분기, 서비스 호출, Repository가 영속성 컨텍스트를 확인
영속성 컨텍스트의 1차 cache가 비어있다면 DB에서 가져와야함
선수 table과 팀 table의 관계가 ManyToOne이고, 이의 기본 전략은 Eager
Eager 전략은 관련된 Table을 가져옴 -> 이는 이대호 선수와 롯데 팀 정보가 영속성 컨텍스트에 저장
Repository는 이대호 선수만 요청하여, 이대호 선수만 가져옴
ORM이기 때문에 이대호 선수 객체안에 팀 객체도 존재, 팀 정보도 get해서 가져올 수 있음
분기로 리턴 -> 영속성, jdbc, 트랜잭션 종료
이 때 1차캐시에 남아있는 이대호 선수, 팀 롯데는 비영속 상태로 됨
-> 영속성 컨텍스트가 종료됬기 때문
rsp에서 이대호 선수 정보를 리턴 하면됨

이때 eager가 아닌 lazy 전략으로 변경 가능
lazy 전략은 관련 된 table을 들고 오지 않음, 즉 롯데 팀을 안 가져옴
rsp 하기 전 @Controller에서 html(view)를 만들어 화면을 제공해야함
이때 팀 정보가 필요할 경우, 팀 정보 못 가져옴
왜? 영속성 컨텍스트가 종료되었기 때문, 다른 것도 종료 됨
lazy 일때 팀 객체 대신, 롯데 팀 프록시 객체(빈 연결된 객체)를 대신 가져옴
실제로는 팀정보 대신 프록시가 전달됨
@Controller에서 프록시를 호출 한다고 해서 전부 종료되어서 아무것도 호출 못 함
->따라서 영속성 컨텍스트 종료를 @Controller 종료로 변경 함
이 때 프록시를 호출한다면, 트랜잭션은 건드리지 않고 jdbc커넥션만 연결하여 가져오고 종료함
-> 이 전략의 장점
 - 영속성 컨텍스트의 시작 종료 시점은 @Controller의 시작 종료시점
 - 트랜잭션, jdbc의 시작 종료 시점은 @Service의 시작 종료시점
 - db 부하 감소, @ManyToOne의 Lazy전략에서도 연결된 객체를 가져올 수 있음 (프록시가 jdbc커넥션을 일시적으로 생성)
-> 단점
 - @Controller에서 변경시 변경 불가능 : 영속성 컨텍스트만 유지되어 있고, 트랜잭션은 종료되어 불가능(commit 불가)

applicatinion.yml 의 jpa: open-in-view: true로 설정할 경우 lazy 로딩이 가능
영속성을 프레젠테이션 계층까지 유지, 트랜잭션은 service에서 종료됨
User Interface = Controller 라고 생각'
--------!!!!!--------
따라서 lazy loading : User Interface가 proxy를 통해 객체를 로딩하는 것
OSIV : open session in view <- spring 2.0에서 default로 설정 됨
OSIV는 Persistence Context의 지속기간을 User Interface까지 유지하는 것이고
이를 비활성화 하면 Persistence Context의 지속기간이 Service까지 유지됨
--------!!!!!--------

?? : view에서 호출시 다른 트랜잭션에 의해 변경된다면 다른 결과 나오는지?

스프링 시큐리티를 의존성 추가할경우 사이트에 처음 접근시 가로채어 로그인창이 뜨게함
초기값은 user, ij에 생성된 password
세션을 알아서 잡음

시큐리티는 login 시 parameter username, password를 가지고 시큐리티 세션으로 가로챔
이로 생성된 유저정보 객체를 IoC를 통해 user에 DI시켜서 사용할 수 있음
단 시큐리티 세션에 User 오브젝트를 넣을 수는 없음
넣으려면 user extends UserDetails로 할 수 있기는 함
password는 해쉬되어야만 전달 가능
해쉬 : 고정길이의 문자열 값, 파일의 위변조 탐지가능

xss : 자바스크립트 공격, SQL injection 과 유사하게 텍스트 넣는곳에 스크립트 작성
-> 해결방법 : lucy(naver)등을 사용
csrf :
 특정 주소는 ROLE에 의해 막혀있어 접근 불가라 가정,
 공격자는 특정한 하이퍼링크에 <a href="{공격주소}"> 로 쌓아서 전송
 관리자가 하이퍼링크 접근시 그 세션은 권한이 막혀있지 않기 때문에 접근이 가능함
 -> 해결방법 : get -> post 방식
 y? 하이퍼링크는 get방식, post불가능

 referrer 검증 : 같은 도메인에서 요청이 들어오지 않는다면 차단
 ex) naver의 공격페이지를 naver.email에서 요청시 차단

 csrf Token : 사용자 세션의 요청에 대해 서버단에서 검증하는 방법
 - 사용자가 로그인, 특정 요청시 csrf 토큰을 생성하여 세션에 저장
 - 요청 페이지에 hidden으로 각 요청마다 토큰을 전송
 막을 수 있는 것? 세션에 토큰이 없는 유저의 공격을 막음

우리는 왜 비활성화?
user.js에서 ajax에 별도로 토큰에 관한 문장이 없어 차단됨
->시큐리티 기본기능

ViewResolver : 페이지를 만들어서 응답
page에 대한 jsp를 찾아서 html로 만들어서 return -> controller만
RestController는 page라는 메세지 자체 return

Interceptor : 특정 method 직전에 작동하는 함수 -> filter, aop와 유사
- filter : req, rsp를 거르는 역할, req : Dispatcher 이전에, rsp : Dispatcher 이후
- Interceptor : Controller 호출 전,후 context 내부에서 처리, 특정 컨트롤러의 권한 체크등의 역할
- AOP : 특정 메서드 전후 등 자유로운 지점에서 사용가능, 어노테이션, 주소, 파라미터 등으로 대상 지정가능
서비스는 여러 트랜잭션의 기능을 묶어서 수행하는 역할, 이중 일부가 작동하지 않을경우 rollback

--- 오늘의 영단어 ---
authentication: 행위의 사용자를 확인
authorization: 행위의 권한을 확인
https://docs.oracle.com/javase/8/docs/technotes/guides/security/jaas/JAASRefGuide.html

serializable: 객체의 텍스트화
deserializable: 텍스트의 객체화
--- JAAS 검색 해 ---

======세션을 강제로 만드는 법 : Authentication 강제로 대입 <- 안됨!=======
로그인 요청
인증필터: UsernamePasswordAuthenticationToken 생성 -> 파라미터로 principal, credential, principal.getAttributes()
- credential: principal이 맞다는것을 인증하는 자격증명 객체
AuthenticationManger: Token 전달, Token을 통해 Authentication 생성
 - 세션 객체 내부의 SecurityContext 에 Authentication 객체를 넣어야함
 - username, password 전달해야함, 이는 Token 을 통해 전달됨
 - 만들때 조건: DB에 있어야함
userDetailService : DB에 질의, 응답을 전달
 - username은 Token으로 전달
 - password는 Bcrypt로 암호화 후 전달
Authentication: username, password 가 있다면 Authentication 생성, 세션에 저장
=======================================================안됨========

OAuth(Open Auth): 인증 처리를 대신함, 자원에 접근할 권한을 부여
카카오 로그인 과정
1. user가 카카오 api를 통해 로그인, 동의 창 제공됨
2. 카카오 api가 callback 링크 제공, code 제공으로 인증
3. blog 서버가 code를 api에 제공
4. api는 AccessToken으로 카카오 자원 서버 접근 권한 부여
5. AccessToken 으로 개인정보 접근

user: resource owner, blog: client, api: auth server, 자원: resource server

Spring Official OAuth: Facebook, google -> OAuth2 Client lib

reply에서 reply.content는 문제가 안됨, reply.user 참조시 그 user가 board를 참조하는 문제발생
-> 무한 참조 문제 : db에 연결된 항목을 가져올때 자기 자신도 참조되어 무한히 참조되는 현상